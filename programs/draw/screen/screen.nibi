(:= _width  nil)
(:= _height nil)
(:= _display nil)
(:= _lhs_buffer nil)

(fn get_size [] (<- (proc [_width _height])))

(fn init [fill width height] [
  (assert (eq "string" (type fill)) "Fill value must be a string")
  (assert (eq "int" (type width)) "Width value must be an integer")
  (assert (eq "int" (type height)) "Height value must be an integer")
  (assert (> width 0) "Width value must be greater than 0")
  (assert (< width 100) "Width value must be less than 100")
  (assert (> height 0) "Height value must be greater than 0")
  (assert (< height 100) "Height value must be less than 100")

  (set _lhs_buffer "")
  (loop (:= x 1) (< x (len (split height))) (:= x (+ x 1)) 
    (set _lhs_buffer (+ _lhs_buffer " ")))

  (set _width width)
  (set _height height)
  (set _display (<|> (<|> fill _width) _height))

  (<- true)
])

(fn set_pixel [x y value] [
  (assert (eq "int" (type x)) "Pixel X value must be an integer")
  (assert (eq "int" (type y)) "Pixel Y value must be an integer")
  (? ( or (>= y _height) (< y 0 )) (<-))
  (? ( or (>= x _width) (< x 0)) (<-))
  (set (at (at _display y) x) value)
])

(fn _draw_simple [] [
  (iter _display row [
    (iter row col
      (put col "  "))
    (putln "")
  ])
])

(fn _draw_with_rows_cols [] [
  (put _lhs_buffer)
  (loop (:= x 0) (< x _width) (:= x (+ x 1)) 
    (? (eq 2 (len (split x))) (put " " x) (put "  " x)))

  (putln "")
  
  (:= i 0)
  (iter _display row [
    (? (eq 2 (len (split i))) (put i " ") (put i "  "))
    (iter row col [
      (put col "  ")
    ])
    (set i (+ i 1))
    (putln "")
  ])
])

(fn clear [] [
  (loop (:= x 0) (neq x 100) (:= x (+ x 1)) 
    (putln ""))
])

(fn draw [show_rows_and_cols]
  (? (eq true show_rows_and_cols)
    (_draw_with_rows_cols) 
    (_draw_simple)))

