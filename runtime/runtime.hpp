#pragma once

#include "common/list.hpp"
#include "common/source.hpp"
#include "runtime/cell.hpp"
#include "environment.hpp"

//! \brief The runtime object that will be used to execute the code
//!        that is generated by the list builder
class runtime_c final : public list_cb_if{
public:
  //! \brief Construct a new runtime object
  //! \param global_env The global environment that will be used
  runtime_c(env_c &global_env, source_manager_c& source_manager, cell_memory_manager_t& instruction_memory);

  //! \brief Execute the code that is generated by the list builder
  //! \param list_cell The cell that represents the list
  //! \note This function will be called by the list builder only instructions
  //!       directly read from file will be executed by this function
  //!       All other instructions will be stored and called by these lists
  void on_list(cell_c* list_cell) override;


private:
  // The environment that will be used to store and execute
  // the code that is generated by the list builder
  env_c& global_env_;

  // Note: global env will be the parent to all environments generated
  //       by the runtime, we will use `mark_items_in_use` on this
  //       environment to mark all cells in use as it will propagate
  //       to all child environments


  // Source manager used to track imported files
  source_manager_c& source_manager_;

  // The memory used by all builders to store instructions
  // that is managed by this runtime
  cell_memory_manager_t& instruction_memory_;

  // The memory used by the runtime to allocate 
  // all cells as a result of executing instructions
  cell_memory_manager_t runtime_memory_;
};