(use "reflect")

(assert (eq 1 (reflect::int? 42)) "Failed to detect type")
(assert (eq 1 (reflect::double? 42.123)) "Failed to detect type")
(assert (eq 1 (reflect::string? "This is a string")) "Failed to detect type")
(assert (eq 1 (reflect::list? [ 1 2 3 ])) "Failed to detect type")

(assert (eq 1 (reflect::numeric? 42.123)) "Failed to detect numeric")
(assert (eq 1 (reflect::numeric? 33)) "Failed to detect numeric")

(assert (eq "int" (reflect::type 0)) "incorrect type reflected")
(assert (eq "double" (reflect::type 1.11)) "incorrect type reflected")
(assert (eq "string" (reflect::type "This is a string")) "incorrect type reflected")
(assert (eq "list" (reflect::type [1 2 3])) "incorrect type reflected")

(env moot [
  (fn x [] [
    (putln "YO")
  ])
])

(assert (eq "environment" (reflect::type moot)) "incorrect type reflected")
(assert (eq "function" (reflect::type {moot x})) "incorrect type reflected")