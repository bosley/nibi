(use "screen")
(use "math")

(:= show_rows_cols true)
(:= tile_symbol "â—»")

(fn refresh [] [
  (screen::clear)
  (screen::draw show_rows_cols)
])

(fn clear [] (screen::clear))

(env point [(:= x 0)  (:= y 0)])

(fn coord [x y] [
  (:= p (clone point))
  (set {p x} x)
  (set {p y} y)
  (<- p)
])

(fn validate_point [point] [
  (try [
    (assert (eq "int" (type {point x})))
    (assert (eq "int" (type {point y})))
  ] [
    (putln "Error: " $e)
    (throw "Given coordinate must be an env with an x and a y value.")
  ])
])

(fn _plot_line [x0 y0 x1 y1] [
  (:= dx (math::abs (- x1 x0)))
  (:= dy (math::abs (- y1 y0)))
  (:= D (- (* 2 dy) dx))
  (:= y y0)


  # When DY > DX i think we have issues

  (loop (:= x x0) (<= x x1) (set x (+ x 1)) [
    (screen::set_pixel x y tile_symbol)
    (putln "x=" x " y=" y " D=" D)
    (? (> D 0) [
      (? (> y0 y1) (set y (- y 1)) (set y (+ y 1)))
      (set D (- D (* 2 dx)))
    ]
    (set D (+ D (* 2 dy))))
  ])
])

(fn draw_line [point_one point_two] [
  (validate_point point_one)
  (validate_point point_two)

  (:= x0 nil)
  (:= y0 nil)
  (:= x1 nil)
  (:= y1 nil)

  (? (< {point_one x} {point_two x}) [
    (set x0 {point_one x})
    (set y0 {point_one y})
    (set x1 {point_two x})
    (set y1 {point_two y})
  ][
    (set x0 {point_two x})
    (set y0 {point_two y})
    (set x1 {point_one x})
    (set y1 {point_one y})
  ])

  (_plot_line x0 y0 x1 y1)
])

(fn draw_triangle [p0 p1 p2] [

  (validate_point p0)
  (validate_point p1)
  (validate_point p2)
  (draw_line p0 p1)
  (draw_line p1 p2)
  (draw_line p2 p0)
])


(fn draw_square [x y length] [
  (:= w (at (screen::get_size) 0))
  (:= h (at (screen::get_size) 1))

  (? (or 
      (or
        (>= x w)
        (>= y h))
      (or
        (< x 0)
        (< y 0))) (throw "Invalid coords"))

  (? (<= length 0) (<-))
  
  (:= length (- length 1))
  (loop (:= i 0) (<= i length) (:= i (+ i 1)) [
    (screen::set_pixel (+ x i) y tile_symbol)
    (screen::set_pixel x (+ y i) tile_symbol)
    (screen::set_pixel (+ x i) (+ y length) tile_symbol)
    (screen::set_pixel (+ x length) (+ y i) tile_symbol)
  ])
])

(fn init [width height] [

  (screen::init tile_symbol width height)

])
